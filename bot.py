import os
import logging
import asyncio
import pandas as pd
import pyexcel
import requests
from datetime import datetime
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
import pytz
import json


# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = "7041529119:AAFNcjZ5g_SVtxMBKjyCaIXeZdm3-tYKc1A"
EXCEL_URL = "https://www.ailita.ru/menu/download/docs/11.xls"

CHAT_ID = 376478334  # —Ç–≤–æ–π Telegram chat_id
SETTINGS_FILE = "settings.json"
# === –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ===



def load_settings():
    if os.path.exists("settings.json"):
        with open("settings.json", "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_settings(data):
    with open("settings.json", "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

settings = load_settings()

DOWNLOAD_TIME = settings.get("download_time", "11:30")

# === –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ===
def get_rules_text():
    return f"""üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Telegram-–±–æ—Ç–∞:

/start ‚Äî –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞.
/rules –∏–ª–∏ /r ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.
/search –∏–ª–∏ /s [–∑–∞–ø—Ä–æ—Å] ‚Äî —Ä–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ Excel, –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
/input –∏–ª–∏ /i [–ø–æ–∑–∏—Ü–∏–∏] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ input_main.txt.
/print –∏–ª–∏ /p ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ input_main.txt.
/edit_input –∏–ª–∏ /e [–ø–æ–∑–∏—Ü–∏–∏] ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ input_main.txt.
/logs –∏–ª–∏ /l ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Excel –∏ input_main.txt.
/settime [–≤—Ä–µ–º—è] ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ Excel (—Ñ–æ—Ä–º–∞—Ç HH:MM).
–ü—Ä–∏–º–µ—Ä: /settime 14:00
/time –∏–ª–∏ /t ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏.
/download –∏–ª–∏ /d - –≤—Ä—É—á–Ω—É—é —Å–∫–∞—á–∞—Ç—å Excel —Å —Å–∞–π—Ç–∞ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫.

‚è∞ –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ Excel –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {DOWNLOAD_TIME} –ø–æ –ú–°–ö. –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ–∏—Å–∫ –ø–æ input_main.txt.

üì• –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å Excel –≤—Ä—É—á–Ω—É—é ‚Äî –æ–Ω –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç –∞–≤—Ç–æ—Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ.
üìÑ –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ input_main.txt ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–∫–æ–≥–æ —Ñ–∞–π–ª–∞ –∑–∞–º–µ–Ω–∏—Ç –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.
"""



# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
os.makedirs("storage", exist_ok=True)


# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
log_dir = "logs"
os.makedirs(log_dir, exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler(os.path.join(log_dir, "bot.log"), encoding="utf-8"),
        logging.StreamHandler()
    ]
)


manual_excel_uploaded = False
last_excel_update = None
last_input_update = None
# === –°–∫–∞—á–∏–≤–∞–Ω–∏–µ Excel ===

# === –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π ===
async def process_search(app, chat_id, input_path="storage/input_main.txt", manual=False):
    try:
        xls_path = "storage/global_excel.xls"

        if not os.path.exists(xls_path):
            await app.bot.send_message(chat_id, "‚ùó Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if not os.path.exists(input_path):
            await app.bot.send_message(chat_id, "‚ùó –§–∞–π–ª input_main.txt –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        xlsx_path = xls_path.replace(".xls", ".xlsx")
        pyexcel.save_book_as(file_name=xls_path, dest_file_name=xlsx_path)

        df_raw = pd.read_excel(xlsx_path, header=None, engine="openpyxl")
        target_columns = ["–ö–æ–¥", "–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä—ã, —Å–æ—Ä—Ç–∞"]

        header_row_idx = None
        for i in range(len(df_raw)):
            row_values = df_raw.iloc[i].astype(str).str.lower()
            if all(any(col.lower() in str(cell) for cell in row_values) for col in target_columns):
                header_row_idx = i
                break

        if header_row_idx is None:
            await app.bot.send_message(chat_id, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ")
            return

        df = pd.read_excel(xlsx_path, header=header_row_idx, engine="openpyxl")

        with open(input_path, "r", encoding="utf-8") as f:
            search_terms = [s.strip() for s in f.read().strip().lower().split(",") if s.strip()]

        mask = False
        for term in search_terms:
            mask |= df["–ö–æ–¥"].astype(str).str.lower().str.contains(term, na=False)
            mask |= df["–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä—ã, —Å–æ—Ä—Ç–∞"].astype(str).str.lower().str.contains(term, na=False)

        results = df[mask]

        MAX_MESSAGE_LENGTH = 4000  # –Ω–µ–º–Ω–æ–≥–æ –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫

# ...
        if results.empty:
            await app.bot.send_message(chat_id, "‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            note = "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤—Ä—É—á–Ω—É—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π Excel\n" if manual else "üì• –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∞–≤—Ç–æ—Å–∫–∞—á–∞–Ω–Ω—ã–π Excel\n"
            lines = [f"- {row['–ö–æ–¥']} | {row['–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä—ã, —Å–æ—Ä—Ç–∞']}" for _, row in results.iterrows()]
            
            msg = note
            for line in lines:
                if len(msg) + len(line) + 1 > MAX_MESSAGE_LENGTH:
                    await app.bot.send_message(chat_id, msg.strip())
                    msg = ""  # –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                msg += line + "\n"

            if msg.strip():  # –Ω–µ –∑–∞–±—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫
                await app.bot.send_message(chat_id, msg.strip())
        await app.bot.send_message(chat_id, "‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω.")
    except Exception as e:
        await app.bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")




# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç! Excel –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ {DOWNLOAD_TIME}.\n"
        "–ó–∞–≥—Ä—É–∂–∞–π Excel –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.\n"
        "–ö–æ–º–∞–Ω–¥—ã: /search –∏–ª–∏ /s –¥–ª—è –ø–æ–∏—Å–∫–∞, /rules –∏–ª–∏ /r –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."
    )


async def rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(get_rules_text())
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é


async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = " ".join(context.args).strip().lower()
    if not query:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /search <—Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å>")
        return

    input_path = "storage/input_temp.txt"
    with open(input_path, "w", encoding="utf-8") as f:
        f.write(query)

    await process_search(context, update.message.chat_id, input_path=input_path, manual=manual_excel_uploaded)


manual_excel_uploaded = False  # –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥, –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global manual_excel_uploaded, last_excel_update, last_input_update
    file = await update.message.document.get_file()
    filename = update.message.document.file_name

    if filename.endswith(".xls"):
        path = "storage/global_excel.xls"
        await file.download_to_drive(path)
        manual_excel_uploaded = True
        await update.message.reply_text("‚úÖ Excel –∑–∞–≥—Ä—É–∂–µ–Ω –≤—Ä—É—á–Ω—É—é.")
        last_excel_update = datetime.now(pytz.timezone("Europe/Moscow"))

        if os.path.exists("storage/input_main.txt"):
            await process_search(context, update.message.chat_id, manual=True)

    elif filename.lower() == "input_main.txt":

        path = "storage/input_main.txt"
        await file.download_to_drive(path)
        await update.message.reply_text("‚úÖ Input –∑–∞–≥—Ä—É–∂–µ–Ω –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π.")
        last_input_update = datetime.now(pytz.timezone("Europe/Moscow"))
        if os.path.exists("storage/global_excel.xls"):
            await process_search(context, update.message.chat_id, manual=manual_excel_uploaded)


async def show_log(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tz = pytz.timezone("Europe/Moscow")
    msg = "üßæ –õ–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:\n"

    if last_excel_update:
        msg += f"üì• Excel: {last_excel_update.strftime('%d.%m %H:%M')} (–ú–°–ö)\n"
    else:
        msg += "üì• Excel: –µ—â—ë –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è\n"

    if last_input_update:
        msg += f"üìù input_main.txt: {last_input_update.strftime('%d.%m %H:%M')} (–ú–°–ö)\n"
    else:
        msg += "üìù input_main.txt: –µ—â—ë –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è\n"

    settings = load_settings()
    if "excel_last_status" in settings:
        msg += f"üìä –°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Excel: {settings['excel_last_status']}\n"

    await update.message.reply_text(msg)
    logging.info("–ü–æ–∫–∞–∑–∞–Ω—ã –ª–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.")


# === –ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ Excel ===
async def scheduled_download(app):
    global manual_excel_uploaded, last_excel_update, last_input_update
    tz = pytz.timezone("Europe/Moscow")
    now_dt = datetime.now(tz)
    now = now_dt.strftime("%H:%M")

    print(f"[{now}] ‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏...")
    logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏: —Å–µ–π—á–∞—Å {now}, —Ü–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è ‚Äî {DOWNLOAD_TIME}")

    if now == DOWNLOAD_TIME:
        print(f"[{now}] ‚è¨ –í—Ä–µ–º—è —Å–æ–≤–ø–∞–ª–æ, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É Excel...")
        logging.info(f"‚è∞ –í—Ä–µ–º—è —Å–æ–≤–ø–∞–ª–æ: {now} ‚Äî –∑–∞–ø—É—Å–∫–∞—é –ø–æ–ø—ã—Ç–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Excel.")

        try:
            r = requests.get(EXCEL_URL)
            if r.status_code == 200:
                with open("storage/global_excel.xls", "wb") as f:
                    f.write(r.content)

                manual_excel_uploaded = False
                last_excel_update = now_dt
                logging.info(f"‚úÖ Excel —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {now} (–ú–°–ö)")
                print(f"[{now}] ‚úÖ Excel —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")

                # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                settings = load_settings()
                settings["excel_last_status"] = f"—É—Å–ø–µ—à–Ω–æ ({now})"
                save_settings(settings)

                await app.bot.send_message(
                    chat_id=CHAT_ID,
                    text=f"‚úÖ Excel –æ–±–Ω–æ–≤–ª—ë–Ω –≤ {now} (–ú–°–ö)! –ó–∞–ø—É—Å–∫–∞—é –ø–æ–∏—Å–∫ –ø–æ input_main.txt..."
                )

                await process_search(app, CHAT_ID, manual=False)
                logging.info("–ü–æ–∏—Å–∫ –ø–æ input_main.txt –∑–∞–≤–µ—Ä—à—ë–Ω.")
            else:
                msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Excel: —Å—Ç–∞—Ç—É—Å {r.status_code}"
                logging.warning(msg)
                print(f"[{now}] ‚ùå {msg}")

                # ‚ùå –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                settings = load_settings()
                settings["excel_last_status"] = f"–æ—à–∏–±–∫–∞ {r.status_code} ({now})"
                save_settings(settings)

                await app.bot.send_message(chat_id=CHAT_ID, text=msg)

        except Exception as e:
            msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ Excel: {e}"
            logging.exception(msg)
            print(f"[{now}] ‚ö†Ô∏è {msg}")

            # ‚ùå –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            settings = load_settings()
            settings["excel_last_status"] = f"–æ—à–∏–±–∫–∞: {str(e)} ({now})"
            save_settings(settings)

            await app.bot.send_message(chat_id=CHAT_ID, text=msg)




# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏ ===
async def post_init(app):
    print("üü¢ post_init –∑–∞–ø—É—â–µ–Ω ‚Äî –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è")
    logging.info("post_init –∑–∞–ø—É—â–µ–Ω ‚Äî –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –æ –∑–∞–ø—É—Å–∫–µ
    try:
        await app.bot.send_message(
            chat_id=CHAT_ID,
            text="üîÑ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.\n–ê–≤—Ç–æ–ø–æ–∏—Å–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ " + DOWNLOAD_TIME
        )
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ")
        logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ: {e}")
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ")

    # –¶–∏–∫–ª –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    async def schedule_loop():
        print("üîÅ schedule_loop —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª")
        while True:
            await scheduled_download(app)
            await asyncio.sleep(60)

    asyncio.create_task(schedule_loop())


async def append_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global last_input_update
    query = " ".join(context.args).strip().lower()
    if not query:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /i <–ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é>")
        return

    path = "storage/input_main.txt"
    # –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not os.path.exists(path):
        with open(path, "w", encoding="utf-8") as f:
            f.write(query)
    else:
        with open(path, "a", encoding="utf-8") as f:
            f.write("," + query)

    await update.message.reply_text("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ input_main.txt:\n" + query)
    last_input_update = datetime.now(pytz.timezone("Europe/Moscow"))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
    await process_search(context, update.message.chat_id, manual=manual_excel_uploaded)

async def show_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    path = "storage/input_main.txt"
    if not os.path.exists(path):
        await update.message.reply_text("‚ùó –§–∞–π–ª input_main.txt –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    with open(path, "r", encoding="utf-8") as f:
        content = f.read().strip()

    if not content:
        await update.message.reply_text("‚ö†Ô∏è –§–∞–π–ª input_main.txt –ø—É—Å—Ç.")
        return

    await update.message.reply_text(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ input_main.txt:\n{content}")

async def edit_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global last_input_update  # ‚Üê –¥–æ–±–∞–≤–ª—è–µ–º, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å
    new_text = " ".join(context.args).strip().lower()
    if not new_text:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /edit_input <–Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫>")
        return

    path = "storage/input_main.txt"
    os.makedirs("storage", exist_ok=True)

    with open(path, "w", encoding="utf-8") as f:
        f.write(new_text)

    last_input_update = datetime.now(pytz.timezone("Europe/Moscow"))  # ‚Üê —Ñ–∏–∫—Å
    await update.message.reply_text(f"‚úèÔ∏è input_main.txt –æ–±–Ω–æ–≤–ª—ë–Ω: {new_text}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
    await process_search(context, update.message.chat_id, manual=manual_excel_uploaded)


async def set_download_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM\n–ü—Ä–∏–º–µ—Ä: `/settime 10:45`", parse_mode="Markdown")
        return

    new_time = context.args[0]
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        datetime.strptime(new_time, "%H:%M")

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ settings.json
        settings = load_settings()
        settings["download_time"] = new_time
        save_settings(settings)

        global DOWNLOAD_TIME
        DOWNLOAD_TIME = new_time

        await update.message.reply_text(f"‚è∞ –í—Ä–µ–º—è –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ Excel –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_time} (–ú–°–ö)")
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30)")

async def get_download_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ Excel ‚Äî {DOWNLOAD_TIME} (–ú–°–ö)")

async def manual_download(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global manual_excel_uploaded, last_excel_update
    tz = pytz.timezone("Europe/Moscow")
    now = datetime.now(tz)

    try:
        r = requests.get(EXCEL_URL)
        if r.status_code == 200:
            with open("storage/global_excel.xls", "wb") as f:
                f.write(r.content)

            manual_excel_uploaded = False
            last_excel_update = now
            logging.info(f"üì• Excel –≤—Ä—É—á–Ω—É—é –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ –≤ {now.strftime('%H:%M')} (–ú–°–ö)")

            await update.message.reply_text(f"‚úÖ Excel –≤—Ä—É—á–Ω—É—é –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ –≤ {now.strftime('%H:%M')} (–ú–°–ö)")
            await process_search(context, update.message.chat_id, manual=False)

        else:
            msg = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å Excel: —Å—Ç–∞—Ç—É—Å {r.status_code}"
            logging.warning(msg)
            await update.message.reply_text(msg)

    except Exception as e:
        msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ Excel –≤—Ä—É—á–Ω—É—é: {e}"
        logging.exception(msg)
        await update.message.reply_text(msg)


# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
def main():
    app = ApplicationBuilder().token(TOKEN).post_init(post_init).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("rules", rules))
    app.add_handler(CommandHandler("r", rules))
    app.add_handler(CommandHandler("search", search_command))
    app.add_handler(CommandHandler("s", search_command))
    app.add_handler(CommandHandler("i", append_input))
    app.add_handler(CommandHandler("input", append_input))
    app.add_handler(CommandHandler("p", show_input))
    app.add_handler(CommandHandler("print", show_input))
    app.add_handler(CommandHandler("edit_input", edit_input))
    app.add_handler(CommandHandler("e", edit_input))
    app.add_handler(CommandHandler("l", show_log))
    app.add_handler(CommandHandler("logs", show_log))
    app.add_handler(CommandHandler("settime", set_download_time))   
    app.add_handler(CommandHandler("time", get_download_time))
    app.add_handler(CommandHandler("t", get_download_time))
    app.add_handler(CommandHandler("download", manual_download))
    app.add_handler(CommandHandler("d", manual_download))


    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    print("üöÄ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
    app.run_polling()


if __name__ == "__main__":
    try:
        start_time = datetime.now(pytz.timezone("Europe/Moscow"))
        logging.info("üîÑ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
        main()
    except Exception as e:
        crash_time = datetime.now(pytz.timezone("Europe/Moscow"))
        duration = crash_time - start_time
        logging.exception("üí• –ë–æ—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π:")

        # –£–≤–µ–¥–æ–º–∏–º –≤ Telegram
        import telegram
        bot = telegram.Bot(token=TOKEN)
        try:
            bot.send_message(
                chat_id=CHAT_ID,
                text=(
                    f"‚ùå –ë–æ—Ç —É–ø–∞–ª –≤ {crash_time.strftime('%H:%M:%S %d.%m')} (–ú–°–ö)\n"
                    f"‚è± –ë—ã–ª –≤ –æ–Ω–ª–∞–π–Ω–µ: {duration}\n"
                    f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ª–æ–≥."
                )
            )
        except Exception as notify_err:
            logging.error(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {notify_err}")
            logging.error(f"üõë –û—à–∏–±–∫–∞: {e}")
