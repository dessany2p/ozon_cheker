import os
import logging
import pandas as pd
import pyexcel
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
import tempfile
import requests

# –í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –Ω–∏–∂–µ
TOKEN = "7041529119:AAFNcjZ5g_SVtxMBKjyCaIXeZdm3-tYKc1A"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
uploaded_files = {}

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
os.makedirs("storage", exist_ok=True)

logging.basicConfig(level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ Excel (.xls) –∏ input.txt, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è.")

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    document = update.message.document
    file_name = document.file_name

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if file_name.endswith(".xls"):
        excel_path = os.path.join("storage", f"{user_id}_excel.xls")
        file_obj = await document.get_file()
        await file_obj.download_to_drive(excel_path)
        uploaded_files.setdefault(user_id, {})["excel"] = excel_path
        await update.message.reply_text(f"‚úÖ –§–∞–π–ª {file_name} –∑–∞–≥—Ä—É–∂–µ–Ω")
    elif file_name.endswith(".txt"):
        input_path = os.path.join("storage", f"{user_id}_input.txt")
        file_obj = await document.get_file()
        await file_obj.download_to_drive(input_path)
        uploaded_files.setdefault(user_id, {})["input"] = input_path
        await update.message.reply_text(f"‚úÖ –§–∞–π–ª {file_name} –∑–∞–≥—Ä—É–∂–µ–Ω")

    # –ï—Å–ª–∏ –æ–±–∞ —Ñ–∞–π–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    if "excel" in uploaded_files.get(user_id, {}) and "input" in uploaded_files.get(user_id, {}):
        await process_search(update, context, uploaded_files[user_id])

async def process_search(update: Update, context: ContextTypes.DEFAULT_TYPE, paths: dict):
    chat_id = update.message.chat_id
    xls_file = paths["excel"]
    txt_file = paths["input"]
    xlsx_path = xls_file.replace(".xls", ".xlsx")

    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è .xls ‚Üí .xlsx
        pyexcel.save_book_as(file_name=xls_file, dest_file_name=xlsx_path)
        df_raw = pd.read_excel(xlsx_path, header=None, engine="openpyxl")

        # –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        target_columns = ["–ö–æ–¥", "–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä—ã, —Å–æ—Ä—Ç–∞"]
        header_row_idx = None
        for i in range(len(df_raw)):
            row_values = df_raw.iloc[i].astype(str).str.lower()
            if all(any(col.lower() in str(cell) for cell in row_values) for col in target_columns):
                header_row_idx = i
                break
        if header_row_idx is None:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏")
            return

        df = pd.read_excel(xlsx_path, header=header_row_idx, engine="openpyxl")

        with open(txt_file, "r", encoding="utf-8") as f:
            content = f.read().strip().lower()
            search_terms = [term.strip() for term in content.split(",") if term.strip()]

        mask = False
        for term in search_terms:
            mask |= df["–ö–æ–¥"].astype(str).str.lower().str.contains(term, na=False)
            mask |= df["–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä—ã, —Å–æ—Ä—Ç–∞"].astype(str).str.lower().str.contains(term, na=False)

        results = df[mask]

        if results.empty:
            await update.message.reply_text("‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∫—É—Å–∫–∏ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram ‚Äî 4096 —Å–∏–º–≤–æ–ª–æ–≤)
            msg = "üîç –ù–∞–π–¥–µ–Ω—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:\n"
            lines = []
            for _, row in results.iterrows():
                line = f"- {row['–ö–æ–¥']} | {row['–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä—ã, —Å–æ—Ä—Ç–∞']}"
                lines.append(line)
            full_msg = msg + "\n".join(lines)
            for i in range(0, len(full_msg), 4000):
                await context.bot.send_message(chat_id=chat_id, text=full_msg[i:i+4000])
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /search
    query = " ".join(context.args).strip().lower()
    user_id = update.message.from_user.id
    if not query:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /search <—Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å>")
        return
    if user_id not in uploaded_files or "excel" not in uploaded_files[user_id]:
        await update.message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏ Excel —Ñ–∞–π–ª.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π input-—Ñ–∞–π–ª
    input_path = os.path.join("storage", f"{user_id}_input.txt")
    with open(input_path, "w", encoding="utf-8") as f:
        f.write(query)
    uploaded_files[user_id]["input"] = input_path

    await process_search(update, context, uploaded_files[user_id])

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("search", search_command))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
