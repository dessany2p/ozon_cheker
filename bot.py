import os
import logging
import asyncio
import pandas as pd
import pyexcel
import requests
from datetime import datetime
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = "7041529119:AAFNcjZ5g_SVtxMBKjyCaIXeZdm3-tYKc1A"
EXCEL_URL = "https://www.ailita.ru/menu/download/docs/11.xls"
DOWNLOAD_TIME = "11:00"  # –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
CHAT_ID = 376478334  # —Ç–≤–æ–π Telegram chat_id


# === –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ===
RULES_TEXT = """üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Telegram-–±–æ—Ç–∞:
/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞.
/rules –∏–ª–∏ /r ‚Äî –ø–æ–ª–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞.
/search [–∑–∞–ø—Ä–æ—Å] –∏–ª–∏ /s [–∑–∞–ø—Ä–æ—Å] ‚Äî –ø–æ–∏—Å–∫ –ø–æ Excel –ø–æ –æ–¥–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É (–Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª).
–ü—Ä–∏–º–µ—Ä: /s —Ä–µ–¥–∏—Å
/input [—Å–ª–æ–≤–∞] –∏–ª–∏ /i [—Å–ª–æ–≤–∞] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤ –∫–æ–Ω–µ—Ü –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ input_main.txt.
–ü—Ä–∏–º–µ—Ä: /i —É–∫—Ä–æ–ø, –±–∞–∑–∏–ª–∏–∫
/print –∏–ª–∏ /p ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ input_main.txt.
/edit_input [—Å–ª–æ–≤–∞] –∏–ª–∏ /e [—Å–ª–æ–≤–∞] ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω–∏—Ç—å input_main.txt –Ω–∞ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫.
–ü—Ä–∏–º–µ—Ä: /e —Ç–æ–º–∞—Ç, –º–æ—Ä–∫–æ–≤—å, –∫–∞–±–∞—á–æ–∫

–í–∞–∂–Ω–æ:

–ë–æ—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 11:00 (–ø–æ —Å–µ—Ä–≤–µ—Ä—É) —Å–∫–∞—á–∏–≤–∞–µ—Ç Excel –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ input_main.txt.

–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å Excel –≤—Ä—É—á–Ω—É—é ‚Äî —Ç–æ–≥–¥–∞ –æ–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç –∞–≤—Ç–æ-—Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª.
–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ input_main.txt, –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ —á–∞—Ç-–±–æ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ñ–∞–π–ª input_main.txt –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–æ–º–∞–Ω–¥–µ /e .
"""

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
os.makedirs("storage", exist_ok=True)
logging.basicConfig(level=logging.INFO)


manual_excel_uploaded = False
# === –°–∫–∞—á–∏–≤–∞–Ω–∏–µ Excel ===

# === –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π ===
async def process_search(app, chat_id, input_path="storage/input_main.txt", manual=False):
    try:
        xls_path = "storage/global_excel.xls"

        if not os.path.exists(xls_path):
            await app.bot.send_message(chat_id, "‚ùó Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if not os.path.exists(input_path):
            await app.bot.send_message(chat_id, "‚ùó –§–∞–π–ª input_main.txt –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        xlsx_path = xls_path.replace(".xls", ".xlsx")
        pyexcel.save_book_as(file_name=xls_path, dest_file_name=xlsx_path)

        df_raw = pd.read_excel(xlsx_path, header=None, engine="openpyxl")
        target_columns = ["–ö–æ–¥", "–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä—ã, —Å–æ—Ä—Ç–∞"]

        header_row_idx = None
        for i in range(len(df_raw)):
            row_values = df_raw.iloc[i].astype(str).str.lower()
            if all(any(col.lower() in str(cell) for cell in row_values) for col in target_columns):
                header_row_idx = i
                break

        if header_row_idx is None:
            await app.bot.send_message(chat_id, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ")
            return

        df = pd.read_excel(xlsx_path, header=header_row_idx, engine="openpyxl")

        with open(input_path, "r", encoding="utf-8") as f:
            search_terms = [s.strip() for s in f.read().strip().lower().split(",") if s.strip()]

        mask = False
        for term in search_terms:
            mask |= df["–ö–æ–¥"].astype(str).str.lower().str.contains(term, na=False)
            mask |= df["–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä—ã, —Å–æ—Ä—Ç–∞"].astype(str).str.lower().str.contains(term, na=False)

        results = df[mask]

        MAX_MESSAGE_LENGTH = 4000  # –Ω–µ–º–Ω–æ–≥–æ –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫

# ...
        if results.empty:
            await app.bot.send_message(chat_id, "‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            note = "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤—Ä—É—á–Ω—É—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π Excel\n" if manual else "üì• –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∞–≤—Ç–æ—Å–∫–∞—á–∞–Ω–Ω—ã–π Excel\n"
            lines = [f"- {row['–ö–æ–¥']} | {row['–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä—ã, —Å–æ—Ä—Ç–∞']}" for _, row in results.iterrows()]
            
            msg = note
            for line in lines:
                if len(msg) + len(line) + 1 > MAX_MESSAGE_LENGTH:
                    await app.bot.send_message(chat_id, msg.strip())
                    msg = ""  # –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                msg += line + "\n"

            if msg.strip():  # –Ω–µ –∑–∞–±—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫
                await app.bot.send_message(chat_id, msg.strip())
        await app.bot.send_message(chat_id, "‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω.")
    except Exception as e:
        await app.bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")




# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! Excel –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ 11:00.\n"
        "–ó–∞–≥—Ä—É–∂–∞–π Excel –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.\n"
        "–ö–æ–º–∞–Ω–¥—ã: /search –∏–ª–∏ /s –¥–ª—è –ø–æ–∏—Å–∫–∞, /rules –∏–ª–∏ /r –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."
    )


async def rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(RULES_TEXT)


async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = " ".join(context.args).strip().lower()
    if not query:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /search <—Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å>")
        return

    input_path = "storage/input_temp.txt"
    with open(input_path, "w", encoding="utf-8") as f:
        f.write(query)

    await process_search(context, update.message.chat_id, input_path=input_path, manual=manual_excel_uploaded)


manual_excel_uploaded = False  # –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥, –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global manual_excel_uploaded
    file = await update.message.document.get_file()
    filename = update.message.document.file_name

    if filename.endswith(".xls"):
        path = "storage/global_excel.xls"
        await file.download_to_drive(path)
        manual_excel_uploaded = True
        await update.message.reply_text("‚úÖ Excel –∑–∞–≥—Ä—É–∂–µ–Ω –≤—Ä—É—á–Ω—É—é.")
        if os.path.exists("storage/input_main.txt"):
            await process_search(context, update.message.chat_id, manual=True)

    elif "input" in filename.lower():
        path = "storage/input_main.txt"
        await file.download_to_drive(path)
        await update.message.reply_text("‚úÖ Input –∑–∞–≥—Ä—É–∂–µ–Ω –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π.")
        if os.path.exists("storage/global_excel.xls"):
            await process_search(context, update.message.chat_id, manual=manual_excel_uploaded)





# === –ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ ===
async def scheduled_download(app):
    global manual_excel_uploaded
    now = datetime.now().strftime("%H:%M")

    if now == DOWNLOAD_TIME:
        try:
            r = requests.get(EXCEL_URL)
            if r.status_code == 200:
                with open("storage/global_excel.xls", "wb") as f:
                    f.write(r.content)
                manual_excel_uploaded = False
                print("‚úÖ Excel —Å–∫–∞—á–∞–Ω –∏ –æ–±–Ω–æ–≤–ª—ë–Ω")

                await app.bot.send_message(
                    chat_id=CHAT_ID,
                    text="‚úÖ Excel –æ–±–Ω–æ–≤–ª—ë–Ω! –ó–∞–ø—É—Å–∫–∞—é –ø–æ–∏—Å–∫ –ø–æ input_main.txt..."
                )
                await process_search(app, CHAT_ID, manual=False)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Excel: —Å—Ç–∞—Ç—É—Å {r.status_code}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ Excel: {e}")

async def append_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = " ".join(context.args).strip().lower()
    if not query:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /i <–ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é>")
        return

    path = "storage/input_main.txt"
    # –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not os.path.exists(path):
        with open(path, "w", encoding="utf-8") as f:
            f.write(query)
    else:
        with open(path, "a", encoding="utf-8") as f:
            f.write("," + query)

    await update.message.reply_text("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ input_main.txt:\n" + query)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
    await process_search(context, update.message.chat_id, manual=manual_excel_uploaded)

async def show_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    path = "storage/input_main.txt"
    if not os.path.exists(path):
        await update.message.reply_text("‚ùó –§–∞–π–ª input_main.txt –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    with open(path, "r", encoding="utf-8") as f:
        content = f.read().strip()

    if not content:
        await update.message.reply_text("‚ö†Ô∏è –§–∞–π–ª input_main.txt –ø—É—Å—Ç.")
        return

    await update.message.reply_text(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ input_main.txt:\n{content}")

async def edit_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_text = " ".join(context.args).strip().lower()
    if not new_text:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /edit_input <–Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫>")
        return

    path = "storage/input_main.txt"
    os.makedirs("storage", exist_ok=True)

    # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
    with open(path, "w", encoding="utf-8") as f:
        f.write(new_text)

    await update.message.reply_text(f"‚úèÔ∏è input_main.txt –æ–±–Ω–æ–≤–ª—ë–Ω: {new_text}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
    await process_search(context, update.message.chat_id, manual=manual_excel_uploaded)


# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ ===
async def post_init(app):
    async def schedule_loop():
        while True:
            await scheduled_download(app)
            await asyncio.sleep(60)
    asyncio.create_task(schedule_loop())


# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
def main():
    app = ApplicationBuilder().token(TOKEN).post_init(post_init).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("rules", rules))
    app.add_handler(CommandHandler("r", rules))
    app.add_handler(CommandHandler("search", search_command))
    app.add_handler(CommandHandler("s", search_command))
    app.add_handler(CommandHandler("i", append_input))
    app.add_handler(CommandHandler("input", append_input))
    app.add_handler(CommandHandler("p", show_input))
    app.add_handler(CommandHandler("print", show_input))
    app.add_handler(CommandHandler("edit_input", edit_input))
    app.add_handler(CommandHandler("e", edit_input))



    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    print("üöÄ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
    app.run_polling()


if __name__ == "__main__":
    main()
